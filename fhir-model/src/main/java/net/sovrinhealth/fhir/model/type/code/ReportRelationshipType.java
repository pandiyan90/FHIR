/*
 * (C) Copyright IBM Corp. 2019, 2022
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package net.sovrinhealth.fhir.model.type.code;

import net.sovrinhealth.fhir.model.annotation.System;
import net.sovrinhealth.fhir.model.type.Code;
import net.sovrinhealth.fhir.model.type.Extension;
import net.sovrinhealth.fhir.model.type.String;

import java.util.Collection;
import java.util.Objects;

import javax.annotation.Generated;

@System("http://hl7.org/fhir/report-relation-type")
@Generated("net.sovrinhealth.fhir.tools.CodeGenerator")
public class ReportRelationshipType extends Code {
    /**
     * Replaces
     * 
     * <p>This document replaces or supersedes the target document.
     */
    public static final ReportRelationshipType REPLACES = ReportRelationshipType.builder().value(Value.REPLACES).build();

    /**
     * Amends
     * 
     * <p>This document notes corrections or changes to replace or supersede parts of the target document.
     */
    public static final ReportRelationshipType AMENDS = ReportRelationshipType.builder().value(Value.AMENDS).build();

    /**
     * Appends
     * 
     * <p>This document adds additional information to the target document.
     */
    public static final ReportRelationshipType APPENDS = ReportRelationshipType.builder().value(Value.APPENDS).build();

    /**
     * Transforms
     * 
     * <p>This document was generated by transforming the target document (eg format or language conversion).
     */
    public static final ReportRelationshipType TRANSFORMS = ReportRelationshipType.builder().value(Value.TRANSFORMS).build();

    /**
     * Replaced With
     * 
     * <p>This document was.
     */
    public static final ReportRelationshipType REPLACED_WITH = ReportRelationshipType.builder().value(Value.REPLACED_WITH).build();

    /**
     * Amended With
     * 
     * <p>This document was.
     */
    public static final ReportRelationshipType AMENDED_WITH = ReportRelationshipType.builder().value(Value.AMENDED_WITH).build();

    /**
     * Appended With
     * 
     * <p>This document was.
     */
    public static final ReportRelationshipType APPENDED_WITH = ReportRelationshipType.builder().value(Value.APPENDED_WITH).build();

    /**
     * Transformed With
     * 
     * <p>This document was.
     */
    public static final ReportRelationshipType TRANSFORMED_WITH = ReportRelationshipType.builder().value(Value.TRANSFORMED_WITH).build();

    private volatile int hashCode;

    private ReportRelationshipType(Builder builder) {
        super(builder);
    }

    /**
     * Get the value of this ReportRelationshipType as an enum constant.
     */
    public Value getValueAsEnum() {
        return (value != null) ? Value.from(value) : null;
    }

    /**
     * Factory method for creating ReportRelationshipType objects from a passed enum value.
     */
    public static ReportRelationshipType of(Value value) {
        switch (value) {
        case REPLACES:
            return REPLACES;
        case AMENDS:
            return AMENDS;
        case APPENDS:
            return APPENDS;
        case TRANSFORMS:
            return TRANSFORMS;
        case REPLACED_WITH:
            return REPLACED_WITH;
        case AMENDED_WITH:
            return AMENDED_WITH;
        case APPENDED_WITH:
            return APPENDED_WITH;
        case TRANSFORMED_WITH:
            return TRANSFORMED_WITH;
        default:
            throw new IllegalStateException(value.name());
        }
    }

    /**
     * Factory method for creating ReportRelationshipType objects from a passed string value.
     * 
     * @param value
     *     A string that matches one of the allowed code values
     * @throws IllegalArgumentException
     *     If the passed string cannot be parsed into an allowed code value
     */
    public static ReportRelationshipType of(java.lang.String value) {
        return of(Value.from(value));
    }

    /**
     * Inherited factory method for creating ReportRelationshipType objects from a passed string value.
     * 
     * @param value
     *     A string that matches one of the allowed code values
     * @throws IllegalArgumentException
     *     If the passed string cannot be parsed into an allowed code value
     */
    public static String string(java.lang.String value) {
        return of(Value.from(value));
    }

    /**
     * Inherited factory method for creating ReportRelationshipType objects from a passed string value.
     * 
     * @param value
     *     A string that matches one of the allowed code values
     * @throws IllegalArgumentException
     *     If the passed string cannot be parsed into an allowed code value
     */
    public static Code code(java.lang.String value) {
        return of(Value.from(value));
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        ReportRelationshipType other = (ReportRelationshipType) obj;
        return Objects.equals(id, other.id) && Objects.equals(extension, other.extension) && Objects.equals(value, other.value);
    }

    @Override
    public int hashCode() {
        int result = hashCode;
        if (result == 0) {
            result = Objects.hash(id, extension, value);
            hashCode = result;
        }
        return result;
    }

    public Builder toBuilder() {
        return new Builder().from(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends Code.Builder {
        private Builder() {
            super();
        }

        @Override
        public Builder id(java.lang.String id) {
            return (Builder) super.id(id);
        }

        @Override
        public Builder extension(Extension... extension) {
            return (Builder) super.extension(extension);
        }

        @Override
        public Builder extension(Collection<Extension> extension) {
            return (Builder) super.extension(extension);
        }

        @Override
        public Builder value(java.lang.String value) {
            return (value != null) ? (Builder) super.value(Value.from(value).value()) : this;
        }

        /**
         * Primitive value for code
         * 
         * @param value
         *     An enum constant for ReportRelationshipType
         * 
         * @return
         *     A reference to this Builder instance
         */
        public Builder value(Value value) {
            return (value != null) ? (Builder) super.value(value.value()) : this;
        }

        @Override
        public ReportRelationshipType build() {
            ReportRelationshipType reportRelationshipType = new ReportRelationshipType(this);
            if (validating) {
                validate(reportRelationshipType);
            }
            return reportRelationshipType;
        }

        protected void validate(ReportRelationshipType reportRelationshipType) {
            super.validate(reportRelationshipType);
        }

        protected Builder from(ReportRelationshipType reportRelationshipType) {
            super.from(reportRelationshipType);
            return this;
        }
    }

    public enum Value {
        /**
         * Replaces
         * 
         * <p>This document replaces or supersedes the target document.
         */
        REPLACES("replaces"),

        /**
         * Amends
         * 
         * <p>This document notes corrections or changes to replace or supersede parts of the target document.
         */
        AMENDS("amends"),

        /**
         * Appends
         * 
         * <p>This document adds additional information to the target document.
         */
        APPENDS("appends"),

        /**
         * Transforms
         * 
         * <p>This document was generated by transforming the target document (eg format or language conversion).
         */
        TRANSFORMS("transforms"),

        /**
         * Replaced With
         * 
         * <p>This document was.
         */
        REPLACED_WITH("replacedWith"),

        /**
         * Amended With
         * 
         * <p>This document was.
         */
        AMENDED_WITH("amendedWith"),

        /**
         * Appended With
         * 
         * <p>This document was.
         */
        APPENDED_WITH("appendedWith"),

        /**
         * Transformed With
         * 
         * <p>This document was.
         */
        TRANSFORMED_WITH("transformedWith");

        private final java.lang.String value;

        Value(java.lang.String value) {
            this.value = value;
        }

        /**
         * @return
         *     The java.lang.String value of the code represented by this enum
         */
        public java.lang.String value() {
            return value;
        }

        /**
         * Factory method for creating ReportRelationshipType.Value values from a passed string value.
         * 
         * @param value
         *     A string that matches one of the allowed code values
         * @return
         *     The corresponding ReportRelationshipType.Value or null if a null value was passed
         * @throws IllegalArgumentException
         *     If the passed string is not null and cannot be parsed into an allowed code value
         */
        public static Value from(java.lang.String value) {
            if (value == null) {
                return null;
            }
            switch (value) {
            case "replaces":
                return REPLACES;
            case "amends":
                return AMENDS;
            case "appends":
                return APPENDS;
            case "transforms":
                return TRANSFORMS;
            case "replacedWith":
                return REPLACED_WITH;
            case "amendedWith":
                return AMENDED_WITH;
            case "appendedWith":
                return APPENDED_WITH;
            case "transformedWith":
                return TRANSFORMED_WITH;
            default:
                throw new IllegalArgumentException(value);
            }
        }
    }
}
